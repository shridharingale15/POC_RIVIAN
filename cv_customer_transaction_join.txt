import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# Script generated for node Amazon Redshift
AmazonRedshift_node1664171006592 = glueContext.create_dynamic_frame.from_catalog(
    database="rivian_db",
    additional_options={
        "aws_iam_role": "arn:aws:iam::622527851988:role/RedshiftServiceAuth_RS"
    },
    redshift_tmp_dir="s3://cv-rivian-demo/temp/",
    table_name="riviandb_public_transaction",
    transformation_ctx="AmazonRedshift_node1664171006592",
)

# Script generated for node S3 bucket
S3bucket_node1 = glueContext.create_dynamic_frame.from_catalog(
    database="rivian_db",
    additional_options={
        "aws_iam_role": "arn:aws:iam::622527851988:role/RedshiftServiceAuth_RS"
    },
    redshift_tmp_dir="s3://cv-rivian-demo/temp/",
    table_name="riviandb_public_customer_snapshot",
    transformation_ctx="S3bucket_node1",
)

# Script generated for node ApplyMapping
ApplyMapping_node2 = Join.apply(
    frame1=S3bucket_node1,
    frame2=AmazonRedshift_node1664171006592,
    keys1=["account_no"],
    keys2=["account_no"],
    transformation_ctx="ApplyMapping_node2",
)

datasource1_no_nulls = DropNullFields.apply(ApplyMapping_node2)

# Script generated for node S3 bucket
S3bucket_node3 = glueContext.write_dynamic_frame.from_catalog(
    frame=datasource1_no_nulls,
    database="rivian_db",
    table_name="riviandb_public_customer_transaction",
    redshift_tmp_dir="s3://cv-rivian-demo/temp/",
    additional_options={
        "aws_iam_role": "arn:aws:iam::622527851988:role/RedshiftServiceAuth_RS"
    },
    transformation_ctx="S3bucket_node3",
)

job.commit()
